import com.github.javaparser.JavaParser;
import com.github.javaparser.ParseException;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.stmt.Statement;
import com.github.javaparser.ast.visitor.ModifierVisitor;
import com.github.javaparser.ast.visitor.VoidVisitorAdapter;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class App {

    private static final Random random = new Random();

    private static class RandomIndexWordReplacementVisitor extends ModifierVisitor<Void> {
        @Override
        public Statement visit(Statement stmt, Void arg) {
            List<String> words = new ArrayList<>();
            if (stmt.getTokenRange().isPresent()) {
                for (Token token : stmt.getTokenRange().get().toStream()) {
                    words.add(token.getText());
                }
            }

            if (!words.isEmpty()) {
                int randomIndex = random.nextInt(words.size());
                words.set(randomIndex, "<mask>");

                String replacedCode = String.join(" ", words);
                return JavaParser.parseStatement(replacedCode);
            }

            return super.visit(stmt, arg);
        }
    }

    public static void main(String[] args) {
        try {
            String filePath = "/producer/Sorgente.txt";
            List<Statement> statements = parseJavaFile(filePath);

            try {
                for (Statement statement : statements) {
                    Statement modifiedStatement = applyMask(statement);
                    System.out.println(modifiedStatement);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static List<Statement> parseJavaFile(String filePath) throws IOException, ParseException {
        CompilationUnit cu = JavaParser.parse(new File(filePath));
        RandomIndexWordReplacementVisitor visitor = new RandomIndexWordReplacementVisitor();
        cu.accept(visitor, null);
        return cu.findAll(Statement.class);
    }

    private static Statement applyMask(Statement statement) throws IOException {
        CompilationUnit cu = new CompilationUnit();
        cu.addTypeDeclaration(statement);
        RandomIndexWordReplacementVisitor visitor = new RandomIndexWordReplacementVisitor();
        cu.accept(visitor, null);
        return cu.getTypes().get(0).getMembers().get(0).asStatement();
    }
}
